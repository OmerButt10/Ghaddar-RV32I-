;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit TOP : 
  module Instruction_Memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip memory_address : UInt<32>, memory_instruction : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[Instruction-Memory.scala 15:16]
    node _io_memory_instruction_T = bits(io.memory_address, 9, 0) @[Instruction-Memory.scala 18:29]
    infer mport io_memory_instruction_MPORT = mem[_io_memory_instruction_T], clock @[Instruction-Memory.scala 18:29]
    io.memory_instruction <= io_memory_instruction_MPORT @[Instruction-Memory.scala 18:24]
    
  module Control_Unit : 
    input clock : Clock
    input reset : Reset
    output io : {flip CU_Opcode : UInt<7>, CU_MemWrite : UInt<1>, CU_Branch : UInt<1>, CU_MemRead : UInt<1>, CU_RegWrite : UInt<1>, CU_MemToReg : UInt<1>, CU_ALU_op : UInt<3>, CU_InA : UInt<2>, CU_InB : UInt<1>, CU_Extend_sel : UInt<2>, CU_Next_PC : UInt<2>}
    
    node _T = eq(io.CU_Opcode, UInt<2>("h03")) @[Control-Unit.scala 20:23]
    when _T : @[Control-Unit.scala 20:40]
      io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 21:24]
      io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 22:22]
      io.CU_MemRead <= UInt<1>("h01") @[Control-Unit.scala 23:23]
      io.CU_RegWrite <= UInt<1>("h01") @[Control-Unit.scala 24:24]
      io.CU_MemToReg <= UInt<1>("h01") @[Control-Unit.scala 25:24]
      io.CU_ALU_op <= UInt<3>("h04") @[Control-Unit.scala 26:22]
      io.CU_InA <= UInt<1>("h00") @[Control-Unit.scala 27:19]
      io.CU_InB <= UInt<1>("h01") @[Control-Unit.scala 28:19]
      io.CU_Extend_sel <= UInt<1>("h00") @[Control-Unit.scala 29:26]
      io.CU_Next_PC <= UInt<1>("h00") @[Control-Unit.scala 30:23]
      skip @[Control-Unit.scala 20:40]
    else : @[Control-Unit.scala 32:187]
      node _T_1 = eq(io.CU_Opcode, UInt<4>("h0f")) @[Control-Unit.scala 32:29]
      node _T_2 = eq(io.CU_Opcode, UInt<5>("h017")) @[Control-Unit.scala 32:64]
      node _T_3 = or(_T_1, _T_2) @[Control-Unit.scala 32:47]
      node _T_4 = eq(io.CU_Opcode, UInt<5>("h01b")) @[Control-Unit.scala 32:99]
      node _T_5 = or(_T_3, _T_4) @[Control-Unit.scala 32:82]
      node _T_6 = eq(io.CU_Opcode, UInt<6>("h03b")) @[Control-Unit.scala 32:134]
      node _T_7 = or(_T_5, _T_6) @[Control-Unit.scala 32:117]
      node _T_8 = eq(io.CU_Opcode, UInt<7>("h073")) @[Control-Unit.scala 32:169]
      node _T_9 = or(_T_7, _T_8) @[Control-Unit.scala 32:152]
      when _T_9 : @[Control-Unit.scala 32:187]
        io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 33:24]
        io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 34:22]
        io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 35:23]
        io.CU_RegWrite <= UInt<1>("h00") @[Control-Unit.scala 36:24]
        io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 37:24]
        io.CU_ALU_op <= UInt<3>("h07") @[Control-Unit.scala 38:22]
        io.CU_InA <= UInt<1>("h00") @[Control-Unit.scala 39:19]
        io.CU_InB <= UInt<1>("h00") @[Control-Unit.scala 40:19]
        io.CU_Extend_sel <= UInt<1>("h00") @[Control-Unit.scala 41:26]
        io.CU_Next_PC <= UInt<1>("h00") @[Control-Unit.scala 42:23]
        skip @[Control-Unit.scala 32:187]
      else : @[Control-Unit.scala 45:45]
        node _T_10 = eq(io.CU_Opcode, UInt<5>("h013")) @[Control-Unit.scala 45:28]
        when _T_10 : @[Control-Unit.scala 45:45]
          io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 46:24]
          io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 47:22]
          io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 48:23]
          io.CU_RegWrite <= UInt<1>("h01") @[Control-Unit.scala 49:24]
          io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 50:24]
          io.CU_ALU_op <= UInt<1>("h01") @[Control-Unit.scala 51:22]
          io.CU_InA <= UInt<1>("h00") @[Control-Unit.scala 52:19]
          io.CU_InB <= UInt<1>("h01") @[Control-Unit.scala 53:19]
          io.CU_Extend_sel <= UInt<1>("h00") @[Control-Unit.scala 54:26]
          io.CU_Next_PC <= UInt<1>("h00") @[Control-Unit.scala 55:23]
          skip @[Control-Unit.scala 45:45]
        else : @[Control-Unit.scala 57:45]
          node _T_11 = eq(io.CU_Opcode, UInt<6>("h023")) @[Control-Unit.scala 57:28]
          when _T_11 : @[Control-Unit.scala 57:45]
            io.CU_MemWrite <= UInt<1>("h01") @[Control-Unit.scala 58:24]
            io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 59:22]
            io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 60:23]
            io.CU_RegWrite <= UInt<1>("h00") @[Control-Unit.scala 61:24]
            io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 62:24]
            io.CU_ALU_op <= UInt<3>("h05") @[Control-Unit.scala 63:22]
            io.CU_InA <= UInt<1>("h00") @[Control-Unit.scala 64:19]
            io.CU_InB <= UInt<1>("h01") @[Control-Unit.scala 65:19]
            io.CU_Extend_sel <= UInt<2>("h02") @[Control-Unit.scala 66:26]
            io.CU_Next_PC <= UInt<1>("h00") @[Control-Unit.scala 67:23]
            skip @[Control-Unit.scala 57:45]
          else : @[Control-Unit.scala 69:45]
            node _T_12 = eq(io.CU_Opcode, UInt<6>("h033")) @[Control-Unit.scala 69:28]
            when _T_12 : @[Control-Unit.scala 69:45]
              io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 70:24]
              io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 71:22]
              io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 72:23]
              io.CU_RegWrite <= UInt<1>("h01") @[Control-Unit.scala 73:24]
              io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 74:24]
              io.CU_ALU_op <= UInt<1>("h00") @[Control-Unit.scala 75:22]
              io.CU_InA <= UInt<1>("h00") @[Control-Unit.scala 76:19]
              io.CU_InB <= UInt<1>("h00") @[Control-Unit.scala 77:19]
              io.CU_Extend_sel <= UInt<1>("h00") @[Control-Unit.scala 78:26]
              io.CU_Next_PC <= UInt<1>("h00") @[Control-Unit.scala 79:23]
              skip @[Control-Unit.scala 69:45]
            else : @[Control-Unit.scala 81:45]
              node _T_13 = eq(io.CU_Opcode, UInt<6>("h037")) @[Control-Unit.scala 81:28]
              when _T_13 : @[Control-Unit.scala 81:45]
                io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 82:24]
                io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 83:22]
                io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 85:23]
                io.CU_RegWrite <= UInt<1>("h01") @[Control-Unit.scala 86:24]
                io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 87:24]
                io.CU_ALU_op <= UInt<3>("h06") @[Control-Unit.scala 88:22]
                io.CU_InA <= UInt<2>("h03") @[Control-Unit.scala 89:19]
                io.CU_InB <= UInt<1>("h01") @[Control-Unit.scala 90:19]
                io.CU_Extend_sel <= UInt<1>("h01") @[Control-Unit.scala 92:26]
                io.CU_Next_PC <= UInt<1>("h00") @[Control-Unit.scala 94:23]
                skip @[Control-Unit.scala 81:45]
              else : @[Control-Unit.scala 96:45]
                node _T_14 = eq(io.CU_Opcode, UInt<7>("h063")) @[Control-Unit.scala 96:28]
                when _T_14 : @[Control-Unit.scala 96:45]
                  io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 97:24]
                  io.CU_Branch <= UInt<1>("h01") @[Control-Unit.scala 98:22]
                  io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 99:23]
                  io.CU_RegWrite <= UInt<1>("h00") @[Control-Unit.scala 100:24]
                  io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 101:24]
                  io.CU_ALU_op <= UInt<2>("h02") @[Control-Unit.scala 102:22]
                  io.CU_InA <= UInt<1>("h00") @[Control-Unit.scala 103:19]
                  io.CU_InB <= UInt<1>("h00") @[Control-Unit.scala 104:19]
                  io.CU_Extend_sel <= UInt<1>("h00") @[Control-Unit.scala 105:26]
                  io.CU_Next_PC <= UInt<1>("h01") @[Control-Unit.scala 106:23]
                  skip @[Control-Unit.scala 96:45]
                else : @[Control-Unit.scala 108:45]
                  node _T_15 = eq(io.CU_Opcode, UInt<7>("h067")) @[Control-Unit.scala 108:28]
                  when _T_15 : @[Control-Unit.scala 108:45]
                    io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 109:24]
                    io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 110:22]
                    io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 111:23]
                    io.CU_RegWrite <= UInt<1>("h01") @[Control-Unit.scala 112:24]
                    io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 113:24]
                    io.CU_ALU_op <= UInt<2>("h03") @[Control-Unit.scala 114:22]
                    io.CU_InA <= UInt<2>("h02") @[Control-Unit.scala 115:19]
                    io.CU_InB <= UInt<1>("h00") @[Control-Unit.scala 116:19]
                    io.CU_Extend_sel <= UInt<1>("h00") @[Control-Unit.scala 117:26]
                    io.CU_Next_PC <= UInt<2>("h03") @[Control-Unit.scala 118:23]
                    skip @[Control-Unit.scala 108:45]
                  else : @[Control-Unit.scala 120:45]
                    node _T_16 = eq(io.CU_Opcode, UInt<7>("h06f")) @[Control-Unit.scala 120:28]
                    when _T_16 : @[Control-Unit.scala 120:45]
                      io.CU_MemWrite <= UInt<1>("h00") @[Control-Unit.scala 121:24]
                      io.CU_Branch <= UInt<1>("h00") @[Control-Unit.scala 122:22]
                      io.CU_MemRead <= UInt<1>("h00") @[Control-Unit.scala 123:23]
                      io.CU_RegWrite <= UInt<1>("h01") @[Control-Unit.scala 124:24]
                      io.CU_MemToReg <= UInt<1>("h00") @[Control-Unit.scala 125:24]
                      io.CU_ALU_op <= UInt<2>("h03") @[Control-Unit.scala 126:22]
                      io.CU_InA <= UInt<2>("h02") @[Control-Unit.scala 127:19]
                      io.CU_InB <= UInt<1>("h00") @[Control-Unit.scala 128:19]
                      io.CU_Extend_sel <= UInt<1>("h00") @[Control-Unit.scala 129:26]
                      io.CU_Next_PC <= UInt<2>("h02") @[Control-Unit.scala 130:23]
                      skip @[Control-Unit.scala 120:45]
                    else : @[Control-Unit.scala 132:15]
                      io.CU_MemWrite is invalid @[Control-Unit.scala 133:24]
                      io.CU_Branch is invalid @[Control-Unit.scala 134:22]
                      io.CU_MemRead is invalid @[Control-Unit.scala 135:23]
                      io.CU_RegWrite is invalid @[Control-Unit.scala 136:24]
                      io.CU_MemToReg is invalid @[Control-Unit.scala 137:24]
                      io.CU_ALU_op is invalid @[Control-Unit.scala 138:22]
                      io.CU_InA is invalid @[Control-Unit.scala 139:19]
                      io.CU_InB is invalid @[Control-Unit.scala 140:19]
                      io.CU_Extend_sel is invalid @[Control-Unit.scala 141:26]
                      io.CU_Next_PC is invalid @[Control-Unit.scala 142:23]
                      skip @[Control-Unit.scala 132:15]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : UInt<32>, flip in_B : UInt<32>, flip func3 : UInt<32>, flip alu_Op : UInt<4>, out : UInt<32>, sum : UInt<32>, CU_Branch_taken : UInt<1>}
    
    node _sum_T = add(io.in_A, io.in_B) @[ALU.scala 56:23]
    node sum = tail(_sum_T, 1) @[ALU.scala 56:23]
    node _cmp_T = bits(io.in_A, 31, 31) @[ALU.scala 57:26]
    node _cmp_T_1 = bits(io.in_B, 31, 31) @[ALU.scala 57:46]
    node _cmp_T_2 = eq(_cmp_T, _cmp_T_1) @[ALU.scala 57:35]
    node _cmp_T_3 = bits(sum, 31, 31) @[ALU.scala 57:59]
    node _cmp_T_4 = bits(io.alu_Op, 1, 1) @[ALU.scala 58:30]
    node _cmp_T_5 = bits(io.in_B, 31, 31) @[ALU.scala 58:42]
    node _cmp_T_6 = bits(io.in_A, 31, 31) @[ALU.scala 58:59]
    node _cmp_T_7 = mux(_cmp_T_4, _cmp_T_5, _cmp_T_6) @[ALU.scala 58:20]
    node cmp = mux(_cmp_T_2, _cmp_T_3, _cmp_T_7) @[ALU.scala 57:18]
    node shamt = bits(io.in_B, 4, 0) @[ALU.scala 60:24]
    node _shin_T = bits(io.alu_Op, 3, 3) @[ALU.scala 61:29]
    node _shin_T_1 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shin_T_2 = xor(UInt<32>("h0ffffffff"), _shin_T_1) @[Bitwise.scala 102:21]
    node _shin_T_3 = shr(io.in_A, 16) @[Bitwise.scala 103:21]
    node _shin_T_4 = and(_shin_T_3, _shin_T_2) @[Bitwise.scala 103:31]
    node _shin_T_5 = bits(io.in_A, 15, 0) @[Bitwise.scala 103:46]
    node _shin_T_6 = shl(_shin_T_5, 16) @[Bitwise.scala 103:65]
    node _shin_T_7 = not(_shin_T_2) @[Bitwise.scala 103:77]
    node _shin_T_8 = and(_shin_T_6, _shin_T_7) @[Bitwise.scala 103:75]
    node _shin_T_9 = or(_shin_T_4, _shin_T_8) @[Bitwise.scala 103:39]
    node _shin_T_10 = bits(_shin_T_2, 23, 0) @[Bitwise.scala 102:28]
    node _shin_T_11 = shl(_shin_T_10, 8) @[Bitwise.scala 102:47]
    node _shin_T_12 = xor(_shin_T_2, _shin_T_11) @[Bitwise.scala 102:21]
    node _shin_T_13 = shr(_shin_T_9, 8) @[Bitwise.scala 103:21]
    node _shin_T_14 = and(_shin_T_13, _shin_T_12) @[Bitwise.scala 103:31]
    node _shin_T_15 = bits(_shin_T_9, 23, 0) @[Bitwise.scala 103:46]
    node _shin_T_16 = shl(_shin_T_15, 8) @[Bitwise.scala 103:65]
    node _shin_T_17 = not(_shin_T_12) @[Bitwise.scala 103:77]
    node _shin_T_18 = and(_shin_T_16, _shin_T_17) @[Bitwise.scala 103:75]
    node _shin_T_19 = or(_shin_T_14, _shin_T_18) @[Bitwise.scala 103:39]
    node _shin_T_20 = bits(_shin_T_12, 27, 0) @[Bitwise.scala 102:28]
    node _shin_T_21 = shl(_shin_T_20, 4) @[Bitwise.scala 102:47]
    node _shin_T_22 = xor(_shin_T_12, _shin_T_21) @[Bitwise.scala 102:21]
    node _shin_T_23 = shr(_shin_T_19, 4) @[Bitwise.scala 103:21]
    node _shin_T_24 = and(_shin_T_23, _shin_T_22) @[Bitwise.scala 103:31]
    node _shin_T_25 = bits(_shin_T_19, 27, 0) @[Bitwise.scala 103:46]
    node _shin_T_26 = shl(_shin_T_25, 4) @[Bitwise.scala 103:65]
    node _shin_T_27 = not(_shin_T_22) @[Bitwise.scala 103:77]
    node _shin_T_28 = and(_shin_T_26, _shin_T_27) @[Bitwise.scala 103:75]
    node _shin_T_29 = or(_shin_T_24, _shin_T_28) @[Bitwise.scala 103:39]
    node _shin_T_30 = bits(_shin_T_22, 29, 0) @[Bitwise.scala 102:28]
    node _shin_T_31 = shl(_shin_T_30, 2) @[Bitwise.scala 102:47]
    node _shin_T_32 = xor(_shin_T_22, _shin_T_31) @[Bitwise.scala 102:21]
    node _shin_T_33 = shr(_shin_T_29, 2) @[Bitwise.scala 103:21]
    node _shin_T_34 = and(_shin_T_33, _shin_T_32) @[Bitwise.scala 103:31]
    node _shin_T_35 = bits(_shin_T_29, 29, 0) @[Bitwise.scala 103:46]
    node _shin_T_36 = shl(_shin_T_35, 2) @[Bitwise.scala 103:65]
    node _shin_T_37 = not(_shin_T_32) @[Bitwise.scala 103:77]
    node _shin_T_38 = and(_shin_T_36, _shin_T_37) @[Bitwise.scala 103:75]
    node _shin_T_39 = or(_shin_T_34, _shin_T_38) @[Bitwise.scala 103:39]
    node _shin_T_40 = bits(_shin_T_32, 30, 0) @[Bitwise.scala 102:28]
    node _shin_T_41 = shl(_shin_T_40, 1) @[Bitwise.scala 102:47]
    node _shin_T_42 = xor(_shin_T_32, _shin_T_41) @[Bitwise.scala 102:21]
    node _shin_T_43 = shr(_shin_T_39, 1) @[Bitwise.scala 103:21]
    node _shin_T_44 = and(_shin_T_43, _shin_T_42) @[Bitwise.scala 103:31]
    node _shin_T_45 = bits(_shin_T_39, 30, 0) @[Bitwise.scala 103:46]
    node _shin_T_46 = shl(_shin_T_45, 1) @[Bitwise.scala 103:65]
    node _shin_T_47 = not(_shin_T_42) @[Bitwise.scala 103:77]
    node _shin_T_48 = and(_shin_T_46, _shin_T_47) @[Bitwise.scala 103:75]
    node _shin_T_49 = or(_shin_T_44, _shin_T_48) @[Bitwise.scala 103:39]
    node shin = mux(_shin_T, io.in_A, _shin_T_49) @[ALU.scala 61:19]
    node _shiftr_T = bits(io.alu_Op, 0, 0) @[ALU.scala 62:32]
    node _shiftr_T_1 = bits(shin, 31, 31) @[ALU.scala 62:43]
    node shiftr_hi = and(_shiftr_T, _shiftr_T_1) @[ALU.scala 62:36]
    node _shiftr_T_2 = cat(shiftr_hi, shin) @[Cat.scala 30:58]
    node _shiftr_T_3 = asSInt(_shiftr_T_2) @[ALU.scala 62:59]
    node _shiftr_T_4 = dshr(_shiftr_T_3, shamt) @[ALU.scala 62:66]
    node shiftr = bits(_shiftr_T_4, 31, 0) @[ALU.scala 62:75]
    node _shitfl_T = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shitfl_T_1 = xor(UInt<32>("h0ffffffff"), _shitfl_T) @[Bitwise.scala 102:21]
    node _shitfl_T_2 = shr(shiftr, 16) @[Bitwise.scala 103:21]
    node _shitfl_T_3 = and(_shitfl_T_2, _shitfl_T_1) @[Bitwise.scala 103:31]
    node _shitfl_T_4 = bits(shiftr, 15, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_5 = shl(_shitfl_T_4, 16) @[Bitwise.scala 103:65]
    node _shitfl_T_6 = not(_shitfl_T_1) @[Bitwise.scala 103:77]
    node _shitfl_T_7 = and(_shitfl_T_5, _shitfl_T_6) @[Bitwise.scala 103:75]
    node _shitfl_T_8 = or(_shitfl_T_3, _shitfl_T_7) @[Bitwise.scala 103:39]
    node _shitfl_T_9 = bits(_shitfl_T_1, 23, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_10 = shl(_shitfl_T_9, 8) @[Bitwise.scala 102:47]
    node _shitfl_T_11 = xor(_shitfl_T_1, _shitfl_T_10) @[Bitwise.scala 102:21]
    node _shitfl_T_12 = shr(_shitfl_T_8, 8) @[Bitwise.scala 103:21]
    node _shitfl_T_13 = and(_shitfl_T_12, _shitfl_T_11) @[Bitwise.scala 103:31]
    node _shitfl_T_14 = bits(_shitfl_T_8, 23, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_15 = shl(_shitfl_T_14, 8) @[Bitwise.scala 103:65]
    node _shitfl_T_16 = not(_shitfl_T_11) @[Bitwise.scala 103:77]
    node _shitfl_T_17 = and(_shitfl_T_15, _shitfl_T_16) @[Bitwise.scala 103:75]
    node _shitfl_T_18 = or(_shitfl_T_13, _shitfl_T_17) @[Bitwise.scala 103:39]
    node _shitfl_T_19 = bits(_shitfl_T_11, 27, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_20 = shl(_shitfl_T_19, 4) @[Bitwise.scala 102:47]
    node _shitfl_T_21 = xor(_shitfl_T_11, _shitfl_T_20) @[Bitwise.scala 102:21]
    node _shitfl_T_22 = shr(_shitfl_T_18, 4) @[Bitwise.scala 103:21]
    node _shitfl_T_23 = and(_shitfl_T_22, _shitfl_T_21) @[Bitwise.scala 103:31]
    node _shitfl_T_24 = bits(_shitfl_T_18, 27, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_25 = shl(_shitfl_T_24, 4) @[Bitwise.scala 103:65]
    node _shitfl_T_26 = not(_shitfl_T_21) @[Bitwise.scala 103:77]
    node _shitfl_T_27 = and(_shitfl_T_25, _shitfl_T_26) @[Bitwise.scala 103:75]
    node _shitfl_T_28 = or(_shitfl_T_23, _shitfl_T_27) @[Bitwise.scala 103:39]
    node _shitfl_T_29 = bits(_shitfl_T_21, 29, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_30 = shl(_shitfl_T_29, 2) @[Bitwise.scala 102:47]
    node _shitfl_T_31 = xor(_shitfl_T_21, _shitfl_T_30) @[Bitwise.scala 102:21]
    node _shitfl_T_32 = shr(_shitfl_T_28, 2) @[Bitwise.scala 103:21]
    node _shitfl_T_33 = and(_shitfl_T_32, _shitfl_T_31) @[Bitwise.scala 103:31]
    node _shitfl_T_34 = bits(_shitfl_T_28, 29, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_35 = shl(_shitfl_T_34, 2) @[Bitwise.scala 103:65]
    node _shitfl_T_36 = not(_shitfl_T_31) @[Bitwise.scala 103:77]
    node _shitfl_T_37 = and(_shitfl_T_35, _shitfl_T_36) @[Bitwise.scala 103:75]
    node _shitfl_T_38 = or(_shitfl_T_33, _shitfl_T_37) @[Bitwise.scala 103:39]
    node _shitfl_T_39 = bits(_shitfl_T_31, 30, 0) @[Bitwise.scala 102:28]
    node _shitfl_T_40 = shl(_shitfl_T_39, 1) @[Bitwise.scala 102:47]
    node _shitfl_T_41 = xor(_shitfl_T_31, _shitfl_T_40) @[Bitwise.scala 102:21]
    node _shitfl_T_42 = shr(_shitfl_T_38, 1) @[Bitwise.scala 103:21]
    node _shitfl_T_43 = and(_shitfl_T_42, _shitfl_T_41) @[Bitwise.scala 103:31]
    node _shitfl_T_44 = bits(_shitfl_T_38, 30, 0) @[Bitwise.scala 103:46]
    node _shitfl_T_45 = shl(_shitfl_T_44, 1) @[Bitwise.scala 103:65]
    node _shitfl_T_46 = not(_shitfl_T_41) @[Bitwise.scala 103:77]
    node _shitfl_T_47 = and(_shitfl_T_45, _shitfl_T_46) @[Bitwise.scala 103:75]
    node shitfl = or(_shitfl_T_43, _shitfl_T_47) @[Bitwise.scala 103:39]
    node _out_T = eq(io.alu_Op, UInt<4>("h00")) @[ALU.scala 65:19]
    node _out_T_1 = eq(io.alu_Op, UInt<4>("h01")) @[ALU.scala 65:44]
    node _out_T_2 = or(_out_T, _out_T_1) @[ALU.scala 65:31]
    node _out_T_3 = eq(io.alu_Op, UInt<4>("h05")) @[ALU.scala 66:19]
    node _out_T_4 = eq(io.alu_Op, UInt<4>("h07")) @[ALU.scala 66:44]
    node _out_T_5 = or(_out_T_3, _out_T_4) @[ALU.scala 66:31]
    node _out_T_6 = eq(io.alu_Op, UInt<4>("h09")) @[ALU.scala 67:19]
    node _out_T_7 = eq(io.alu_Op, UInt<4>("h08")) @[ALU.scala 67:44]
    node _out_T_8 = or(_out_T_6, _out_T_7) @[ALU.scala 67:31]
    node _out_T_9 = eq(io.alu_Op, UInt<4>("h06")) @[ALU.scala 68:19]
    node _out_T_10 = eq(io.alu_Op, UInt<4>("h02")) @[ALU.scala 69:19]
    node _out_T_11 = and(io.in_A, io.in_B) @[ALU.scala 69:41]
    node _out_T_12 = eq(io.alu_Op, UInt<4>("h03")) @[ALU.scala 70:19]
    node _out_T_13 = or(io.in_A, io.in_B) @[ALU.scala 70:40]
    node _out_T_14 = eq(io.alu_Op, UInt<4>("h04")) @[ALU.scala 71:19]
    node _out_T_15 = xor(io.in_A, io.in_B) @[ALU.scala 71:41]
    node _out_T_16 = eq(io.alu_Op, UInt<4>("h0a")) @[ALU.scala 72:19]
    node _out_T_17 = eq(io.alu_Op, UInt<4>("h0b")) @[ALU.scala 73:19]
    node _out_T_18 = mux(_out_T_17, io.in_B, UInt<1>("h00")) @[ALU.scala 73:8]
    node _out_T_19 = mux(_out_T_16, io.in_A, _out_T_18) @[ALU.scala 72:8]
    node _out_T_20 = mux(_out_T_14, _out_T_15, _out_T_19) @[ALU.scala 71:8]
    node _out_T_21 = mux(_out_T_12, _out_T_13, _out_T_20) @[ALU.scala 70:8]
    node _out_T_22 = mux(_out_T_10, _out_T_11, _out_T_21) @[ALU.scala 69:8]
    node _out_T_23 = mux(_out_T_9, shitfl, _out_T_22) @[ALU.scala 68:8]
    node _out_T_24 = mux(_out_T_8, shiftr, _out_T_23) @[ALU.scala 67:8]
    node _out_T_25 = mux(_out_T_5, cmp, _out_T_24) @[ALU.scala 66:8]
    node out = mux(_out_T_2, sum, _out_T_25) @[ALU.scala 65:8]
    io.out <= out @[ALU.scala 76:12]
    io.sum <= sum @[ALU.scala 77:12]
    io.CU_Branch_taken <= UInt<1>("h00") @[ALU.scala 79:22]
    io.CU_Branch_taken <= UInt<1>("h00") @[ALU.scala 118:22]
    
  module Data_Memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip Data_Mem_address : UInt<32>, flip Data_Mem_data : SInt<32>, flip Data_Mem_write : UInt<1>, flip Data_Mem_read : UInt<1>, Data_Mem_output : SInt<32>}
    
    cmem Memory : SInt<32>[1024] @[Data-Memory.scala 15:21]
    when io.Data_Mem_write : @[Data-Memory.scala 17:28]
      node _T = bits(io.Data_Mem_address, 9, 0)
      write mport MPORT = Memory[_T], clock
      MPORT <= io.Data_Mem_data
      skip @[Data-Memory.scala 17:28]
    when io.Data_Mem_read : @[Data-Memory.scala 20:27]
      node _io_Data_Mem_output_T = bits(io.Data_Mem_address, 9, 0) @[Data-Memory.scala 21:42]
      read mport io_Data_Mem_output_MPORT = Memory[_io_Data_Mem_output_T], clock @[Data-Memory.scala 21:42]
      io.Data_Mem_output <= io_Data_Mem_output_MPORT @[Data-Memory.scala 21:28]
      skip @[Data-Memory.scala 20:27]
    else : @[Data-Memory.scala 24:15]
      io.Data_Mem_output is invalid @[Data-Memory.scala 25:28]
      skip @[Data-Memory.scala 24:15]
    
  module ImmdValGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip Imm_instr : SInt<32>, immd_se_I : SInt<32>, immd_se_U : SInt<32>, immd_se_UJ : SInt<32>, immd_se_S : SInt<32>, immd_se_SB : SInt<32>}
    
    node _T = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 20:18]
    node _T_1 = eq(_T, UInt<5>("h01b")) @[Immediate-Generation.scala 20:24]
    node _T_2 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 21:18]
    node _T_3 = eq(_T_2, UInt<2>("h03")) @[Immediate-Generation.scala 21:24]
    node _T_4 = or(_T_1, _T_3) @[Immediate-Generation.scala 20:42]
    node _T_5 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 22:18]
    node _T_6 = eq(_T_5, UInt<4>("h0f")) @[Immediate-Generation.scala 22:24]
    node _T_7 = or(_T_4, _T_6) @[Immediate-Generation.scala 21:42]
    node _T_8 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 23:18]
    node _T_9 = eq(_T_8, UInt<5>("h01b")) @[Immediate-Generation.scala 23:24]
    node _T_10 = or(_T_7, _T_9) @[Immediate-Generation.scala 22:42]
    node _T_11 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 24:18]
    node _T_12 = eq(_T_11, UInt<7>("h067")) @[Immediate-Generation.scala 24:24]
    node _T_13 = or(_T_10, _T_12) @[Immediate-Generation.scala 23:42]
    node _T_14 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 25:18]
    node _T_15 = eq(_T_14, UInt<7>("h073")) @[Immediate-Generation.scala 25:24]
    node _T_16 = or(_T_13, _T_15) @[Immediate-Generation.scala 24:42]
    when _T_16 : @[Immediate-Generation.scala 28:3]
      node _io_immd_se_I_T = bits(io.Imm_instr, 31, 20) @[Immediate-Generation.scala 29:38]
      node _io_immd_se_I_T_1 = asSInt(_io_immd_se_I_T) @[Immediate-Generation.scala 29:52]
      node _io_immd_se_I_T_2 = or(asSInt(UInt<1>("h00")), _io_immd_se_I_T_1) @[Immediate-Generation.scala 29:24]
      node _io_immd_se_I_T_3 = asSInt(_io_immd_se_I_T_2) @[Immediate-Generation.scala 29:24]
      io.immd_se_I <= _io_immd_se_I_T_3 @[Immediate-Generation.scala 29:17]
      io.immd_se_U is invalid @[Immediate-Generation.scala 30:17]
      io.immd_se_UJ is invalid @[Immediate-Generation.scala 31:18]
      io.immd_se_S is invalid @[Immediate-Generation.scala 32:17]
      io.immd_se_SB is invalid @[Immediate-Generation.scala 33:18]
      skip @[Immediate-Generation.scala 28:3]
    else : @[Immediate-Generation.scala 40:3]
      node _T_17 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 36:18]
      node _T_18 = eq(_T_17, UInt<5>("h017")) @[Immediate-Generation.scala 36:24]
      node _T_19 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 37:18]
      node _T_20 = eq(_T_19, UInt<6>("h037")) @[Immediate-Generation.scala 37:24]
      node _T_21 = or(_T_18, _T_20) @[Immediate-Generation.scala 36:42]
      when _T_21 : @[Immediate-Generation.scala 40:3]
        node _io_immd_se_U_T = bits(io.Imm_instr, 31, 12) @[Immediate-Generation.scala 41:37]
        node _io_immd_se_U_T_1 = asSInt(_io_immd_se_U_T) @[Immediate-Generation.scala 41:51]
        node _io_immd_se_U_T_2 = or(asSInt(UInt<1>("h00")), _io_immd_se_U_T_1) @[Immediate-Generation.scala 41:23]
        node _io_immd_se_U_T_3 = asSInt(_io_immd_se_U_T_2) @[Immediate-Generation.scala 41:23]
        io.immd_se_U <= _io_immd_se_U_T_3 @[Immediate-Generation.scala 41:17]
        io.immd_se_I is invalid @[Immediate-Generation.scala 42:17]
        io.immd_se_UJ is invalid @[Immediate-Generation.scala 43:18]
        io.immd_se_S is invalid @[Immediate-Generation.scala 44:17]
        io.immd_se_SB is invalid @[Immediate-Generation.scala 45:18]
        skip @[Immediate-Generation.scala 40:3]
      else : @[Immediate-Generation.scala 51:3]
        node _T_22 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 48:18]
        node _T_23 = eq(_T_22, UInt<7>("h06f")) @[Immediate-Generation.scala 48:24]
        when _T_23 : @[Immediate-Generation.scala 51:3]
          node io_immd_se_UJ_hi_hi_hi = bits(io.Imm_instr, 31, 31) @[Immediate-Generation.scala 52:40]
          node io_immd_se_UJ_hi_hi_lo = bits(io.Imm_instr, 19, 12) @[Immediate-Generation.scala 52:58]
          node io_immd_se_UJ_hi_lo = bits(io.Imm_instr, 20, 20) @[Immediate-Generation.scala 52:80]
          node io_immd_se_UJ_lo_hi = bits(io.Imm_instr, 30, 21) @[Immediate-Generation.scala 52:98]
          node io_immd_se_UJ_lo = cat(io_immd_se_UJ_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
          node io_immd_se_UJ_hi_hi = cat(io_immd_se_UJ_hi_hi_hi, io_immd_se_UJ_hi_hi_lo) @[Cat.scala 30:58]
          node io_immd_se_UJ_hi = cat(io_immd_se_UJ_hi_hi, io_immd_se_UJ_hi_lo) @[Cat.scala 30:58]
          node _io_immd_se_UJ_T = cat(io_immd_se_UJ_hi, io_immd_se_UJ_lo) @[Cat.scala 30:58]
          node _io_immd_se_UJ_T_1 = asSInt(_io_immd_se_UJ_T) @[Immediate-Generation.scala 52:118]
          node _io_immd_se_UJ_T_2 = sub(asSInt(UInt<1>("h00")), _io_immd_se_UJ_T_1) @[Immediate-Generation.scala 52:22]
          node _io_immd_se_UJ_T_3 = tail(_io_immd_se_UJ_T_2, 1) @[Immediate-Generation.scala 52:22]
          node _io_immd_se_UJ_T_4 = asSInt(_io_immd_se_UJ_T_3) @[Immediate-Generation.scala 52:22]
          io.immd_se_UJ <= _io_immd_se_UJ_T_4 @[Immediate-Generation.scala 52:19]
          io.immd_se_U is invalid @[Immediate-Generation.scala 53:17]
          io.immd_se_I is invalid @[Immediate-Generation.scala 54:17]
          io.immd_se_S is invalid @[Immediate-Generation.scala 55:17]
          io.immd_se_SB is invalid @[Immediate-Generation.scala 56:18]
          skip @[Immediate-Generation.scala 51:3]
        else : @[Immediate-Generation.scala 65:3]
          node _T_24 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 61:18]
          node _T_25 = eq(_T_24, UInt<6>("h023")) @[Immediate-Generation.scala 61:24]
          node _T_26 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 62:18]
          node _T_27 = eq(_T_26, UInt<7>("h063")) @[Immediate-Generation.scala 62:24]
          node _T_28 = or(_T_25, _T_27) @[Immediate-Generation.scala 61:42]
          when _T_28 : @[Immediate-Generation.scala 65:3]
            node _io_immd_se_S_T = bits(io.Imm_instr, 31, 22) @[Immediate-Generation.scala 66:37]
            node _io_immd_se_S_T_1 = asSInt(_io_immd_se_S_T) @[Immediate-Generation.scala 66:51]
            node _io_immd_se_S_T_2 = or(asSInt(UInt<1>("h00")), _io_immd_se_S_T_1) @[Immediate-Generation.scala 66:23]
            node _io_immd_se_S_T_3 = asSInt(_io_immd_se_S_T_2) @[Immediate-Generation.scala 66:23]
            io.immd_se_S <= _io_immd_se_S_T_3 @[Immediate-Generation.scala 66:17]
            io.immd_se_U is invalid @[Immediate-Generation.scala 67:17]
            io.immd_se_UJ is invalid @[Immediate-Generation.scala 68:18]
            io.immd_se_I is invalid @[Immediate-Generation.scala 69:17]
            io.immd_se_SB is invalid @[Immediate-Generation.scala 70:18]
            skip @[Immediate-Generation.scala 65:3]
          else : @[Immediate-Generation.scala 77:3]
            node _T_29 = bits(io.Imm_instr, 6, 0) @[Immediate-Generation.scala 74:18]
            node _T_30 = eq(_T_29, UInt<7>("h063")) @[Immediate-Generation.scala 74:24]
            when _T_30 : @[Immediate-Generation.scala 77:3]
              node _io_immd_se_SB_T = bits(io.Imm_instr, 31, 22) @[Immediate-Generation.scala 78:38]
              node _io_immd_se_SB_T_1 = asSInt(_io_immd_se_SB_T) @[Immediate-Generation.scala 78:52]
              node _io_immd_se_SB_T_2 = or(asSInt(UInt<1>("h00")), _io_immd_se_SB_T_1) @[Immediate-Generation.scala 78:24]
              node _io_immd_se_SB_T_3 = asSInt(_io_immd_se_SB_T_2) @[Immediate-Generation.scala 78:24]
              io.immd_se_SB <= _io_immd_se_SB_T_3 @[Immediate-Generation.scala 78:18]
              io.immd_se_U is invalid @[Immediate-Generation.scala 79:17]
              io.immd_se_UJ is invalid @[Immediate-Generation.scala 80:18]
              io.immd_se_S is invalid @[Immediate-Generation.scala 81:17]
              io.immd_se_I is invalid @[Immediate-Generation.scala 82:17]
              skip @[Immediate-Generation.scala 77:3]
            else : @[Immediate-Generation.scala 85:13]
              io.immd_se_I is invalid @[Immediate-Generation.scala 86:19]
              io.immd_se_U is invalid @[Immediate-Generation.scala 87:19]
              io.immd_se_UJ is invalid @[Immediate-Generation.scala 88:20]
              io.immd_se_S is invalid @[Immediate-Generation.scala 89:19]
              io.immd_se_SB is invalid @[Immediate-Generation.scala 90:20]
              skip @[Immediate-Generation.scala 85:13]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : SInt<32>, pc1 : SInt<32>, pc4 : SInt<32>}
    
    reg pc_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Program-Counter.scala 17:25]
    pc_reg <= io.pc @[Program-Counter.scala 18:12]
    io.pc1 <= pc_reg @[Program-Counter.scala 20:12]
    node _io_pc4_T = add(pc_reg, asSInt(UInt<4>("h04"))) @[Program-Counter.scala 21:22]
    node _io_pc4_T_1 = tail(_io_pc4_T, 1) @[Program-Counter.scala 21:22]
    node _io_pc4_T_2 = asSInt(_io_pc4_T_1) @[Program-Counter.scala 21:22]
    io.pc4 <= _io_pc4_T_2 @[Program-Counter.scala 21:12]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip rd : SInt<32>, flip rs1 : SInt<32>, imm : SInt<32>}
    
    node _io_imm_T = add(io.rd, io.rs1) @[Jalr.scala 13:19]
    node _io_imm_T_1 = tail(_io_imm_T, 1) @[Jalr.scala 13:19]
    node _io_imm_T_2 = asSInt(_io_imm_T_1) @[Jalr.scala 13:19]
    node _io_imm_T_3 = and(_io_imm_T_2, asSInt(UInt<37>("h0ffffffffe"))) @[Jalr.scala 13:28]
    node _io_imm_T_4 = asSInt(_io_imm_T_3) @[Jalr.scala 13:28]
    io.imm <= _io_imm_T_4 @[Jalr.scala 13:10]
    
  module Register_File : 
    input clock : Clock
    input reset : Reset
    output io : {flip ReadReg1 : UInt<5>, flip ReadReg2 : UInt<5>, flip RegWrite : UInt<1>, flip WriteReg : UInt<5>, flip WriteData : SInt<32>, ReadData1 : SInt<32>, ReadData2 : SInt<32>}
    
    wire _Reg_File_WIRE : SInt<32>[32] @[Register-File.scala 16:35]
    _Reg_File_WIRE[0] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[1] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[2] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[3] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[4] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[5] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[6] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[7] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[8] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[9] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[10] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[11] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[12] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[13] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[14] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[15] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[16] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[17] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[18] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[19] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[20] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[21] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[22] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[23] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[24] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[25] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[26] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[27] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[28] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[29] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[30] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    _Reg_File_WIRE[31] <= asSInt(UInt<32>("h00")) @[Register-File.scala 16:35]
    reg Reg_File : SInt<32>[32], clock with : (reset => (reset, _Reg_File_WIRE)) @[Register-File.scala 16:27]
    io.ReadData1 <= Reg_File[io.ReadReg1] @[Register-File.scala 19:18]
    io.ReadData2 <= Reg_File[io.ReadReg2] @[Register-File.scala 20:18]
    when io.RegWrite : @[Register-File.scala 22:22]
      Reg_File[io.WriteReg] <= io.WriteData @[Register-File.scala 23:31]
      skip @[Register-File.scala 22:22]
    Reg_File[0] <= asSInt(UInt<1>("h00")) @[Register-File.scala 25:17]
    
  module TOP : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>}
    
    inst Instr_Mod of Instruction_Memory @[TOP.scala 14:27]
    Instr_Mod.clock <= clock
    Instr_Mod.reset <= reset
    inst CU_Mod of Control_Unit @[TOP.scala 15:24]
    CU_Mod.clock <= clock
    CU_Mod.reset <= reset
    inst ALU_Mod of ALU @[TOP.scala 16:25]
    ALU_Mod.clock <= clock
    ALU_Mod.reset <= reset
    inst Data_Memory_Mod of Data_Memory @[TOP.scala 17:33]
    Data_Memory_Mod.clock <= clock
    Data_Memory_Mod.reset <= reset
    inst Immediate_Gen_Mod of ImmdValGen @[TOP.scala 18:35]
    Immediate_Gen_Mod.clock <= clock
    Immediate_Gen_Mod.reset <= reset
    inst PC_Mod of PC @[TOP.scala 19:24]
    PC_Mod.clock <= clock
    PC_Mod.reset <= reset
    inst Jalr_Mod of Jalr @[TOP.scala 20:26]
    Jalr_Mod.clock <= clock
    Jalr_Mod.reset <= reset
    inst Reg_Mod of Register_File @[TOP.scala 21:25]
    Reg_Mod.clock <= clock
    Reg_Mod.reset <= reset
    node Main_ALU_Mux = mux(ALU_Mod.io.CU_Branch_taken, ALU_Mod.io.in_A, ALU_Mod.io.in_B) @[TOP.scala 33:27]
    node br = and(ALU_Mod.io.CU_Branch_taken, CU_Mod.io.CU_Branch) @[TOP.scala 36:41]
    node Br_Mux = mux(br, Immediate_Gen_Mod.io.immd_se_SB, PC_Mod.io.pc4) @[TOP.scala 37:21]
    node _pc_input_T = eq(UInt<1>("h01"), CU_Mod.io.CU_Next_PC) @[Mux.scala 80:60]
    node _pc_input_T_1 = mux(_pc_input_T, Br_Mux, PC_Mod.io.pc4) @[Mux.scala 80:57]
    node _pc_input_T_2 = eq(UInt<2>("h02"), CU_Mod.io.CU_Next_PC) @[Mux.scala 80:60]
    node _pc_input_T_3 = mux(_pc_input_T_2, Immediate_Gen_Mod.io.immd_se_UJ, _pc_input_T_1) @[Mux.scala 80:57]
    node _pc_input_T_4 = eq(UInt<2>("h03"), CU_Mod.io.CU_Next_PC) @[Mux.scala 80:60]
    node pc_input = mux(_pc_input_T_4, Jalr_Mod.io.imm, _pc_input_T_3) @[Mux.scala 80:57]
    PC_Mod.io.pc <= pc_input @[TOP.scala 51:18]
    node _Instr_Mod_io_memory_address_T = bits(PC_Mod.io.pc1, 21, 2) @[TOP.scala 54:50]
    Instr_Mod.io.memory_address <= _Instr_Mod_io_memory_address_T @[TOP.scala 54:33]
    node _CU_Mod_io_CU_Opcode_T = bits(Instr_Mod.io.memory_instruction, 6, 0) @[TOP.scala 58:59]
    CU_Mod.io.CU_Opcode <= _CU_Mod_io_CU_Opcode_T @[TOP.scala 58:25]
    node _Reg_Mod_io_ReadReg1_T = bits(Instr_Mod.io.memory_instruction, 19, 15) @[TOP.scala 62:59]
    Reg_Mod.io.ReadReg1 <= _Reg_Mod_io_ReadReg1_T @[TOP.scala 62:25]
    node _Reg_Mod_io_ReadReg2_T = bits(Instr_Mod.io.memory_instruction, 24, 20) @[TOP.scala 63:59]
    Reg_Mod.io.ReadReg2 <= _Reg_Mod_io_ReadReg2_T @[TOP.scala 63:25]
    node _Reg_Mod_io_WriteReg_T = bits(Instr_Mod.io.memory_instruction, 11, 7) @[TOP.scala 64:60]
    Reg_Mod.io.WriteReg <= _Reg_Mod_io_WriteReg_T @[TOP.scala 64:26]
    Reg_Mod.io.RegWrite <= CU_Mod.io.CU_RegWrite @[TOP.scala 65:25]
    node _Reg_Mod_io_WriteData_T = asSInt(ALU_Mod.io.out) @[TOP.scala 67:111]
    node _Reg_Mod_io_WriteData_T_1 = mux(CU_Mod.io.CU_MemToReg, Data_Memory_Mod.io.Data_Mem_output, _Reg_Mod_io_WriteData_T) @[TOP.scala 67:32]
    Reg_Mod.io.WriteData <= _Reg_Mod_io_WriteData_T_1 @[TOP.scala 67:26]
    node _Immediate_Gen_Mod_io_Imm_instr_T = asSInt(Instr_Mod.io.memory_instruction) @[TOP.scala 71:77]
    Immediate_Gen_Mod.io.Imm_instr <= _Immediate_Gen_Mod_io_Imm_instr_T @[TOP.scala 71:36]
    Data_Memory_Mod.io.Data_Mem_address <= ALU_Mod.io.out @[TOP.scala 75:41]
    Data_Memory_Mod.io.Data_Mem_data <= Reg_Mod.io.ReadData1 @[TOP.scala 76:38]
    Data_Memory_Mod.io.Data_Mem_write <= CU_Mod.io.CU_MemWrite @[TOP.scala 77:39]
    Data_Memory_Mod.io.Data_Mem_read <= CU_Mod.io.CU_MemRead @[TOP.scala 78:38]
    node _Imm_Mux_Output_T = eq(UInt<1>("h00"), CU_Mod.io.CU_Extend_sel) @[Mux.scala 80:60]
    node _Imm_Mux_Output_T_1 = mux(_Imm_Mux_Output_T, Immediate_Gen_Mod.io.immd_se_I, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _Imm_Mux_Output_T_2 = eq(UInt<1>("h01"), CU_Mod.io.CU_Extend_sel) @[Mux.scala 80:60]
    node _Imm_Mux_Output_T_3 = mux(_Imm_Mux_Output_T_2, Immediate_Gen_Mod.io.immd_se_S, _Imm_Mux_Output_T_1) @[Mux.scala 80:57]
    node _Imm_Mux_Output_T_4 = eq(UInt<2>("h02"), CU_Mod.io.CU_Extend_sel) @[Mux.scala 80:60]
    node Imm_Mux_Output = mux(_Imm_Mux_Output_T_4, Immediate_Gen_Mod.io.immd_se_U, _Imm_Mux_Output_T_3) @[Mux.scala 80:57]
    Jalr_Mod.io.rd <= Reg_Mod.io.ReadData1 @[TOP.scala 88:20]
    Jalr_Mod.io.rs1 <= Imm_Mux_Output @[TOP.scala 89:21]
    node ALU_Mux_2 = mux(CU_Mod.io.CU_InB, Imm_Mux_Output, Reg_Mod.io.ReadData2) @[TOP.scala 94:24]
    node _ALU_Mux_1_T = eq(UInt<1>("h01"), CU_Mod.io.CU_InA) @[Mux.scala 80:60]
    node _ALU_Mux_1_T_1 = mux(_ALU_Mux_1_T, PC_Mod.io.pc1, Reg_Mod.io.ReadData1) @[Mux.scala 80:57]
    node _ALU_Mux_1_T_2 = eq(UInt<2>("h02"), CU_Mod.io.CU_InA) @[Mux.scala 80:60]
    node _ALU_Mux_1_T_3 = mux(_ALU_Mux_1_T_2, PC_Mod.io.pc4, _ALU_Mux_1_T_1) @[Mux.scala 80:57]
    node _ALU_Mux_1_T_4 = eq(UInt<2>("h03"), CU_Mod.io.CU_InA) @[Mux.scala 80:60]
    node ALU_Mux_1 = mux(_ALU_Mux_1_T_4, Reg_Mod.io.ReadData1, _ALU_Mux_1_T_3) @[Mux.scala 80:57]
    node Func3 = bits(Instr_Mod.io.memory_instruction, 14, 12) @[TOP.scala 105:48]
    node Func7 = bits(Instr_Mod.io.memory_instruction, 30, 30) @[TOP.scala 106:48]
    ALU_Mod.io.alu_Op <= CU_Mod.io.CU_ALU_op @[TOP.scala 108:23]
    node _ALU_Mod_io_in_A_T = asUInt(ALU_Mux_1) @[TOP.scala 111:40]
    ALU_Mod.io.in_A <= _ALU_Mod_io_in_A_T @[TOP.scala 111:21]
    node _ALU_Mod_io_in_B_T = asUInt(ALU_Mux_2) @[TOP.scala 112:40]
    ALU_Mod.io.in_B <= _ALU_Mod_io_in_B_T @[TOP.scala 112:21]
    ALU_Mod.io.func3 <= CU_Mod.io.CU_Opcode @[TOP.scala 115:22]
    io.out <= CU_Mod.io.CU_MemWrite @[TOP.scala 120:8]
    
